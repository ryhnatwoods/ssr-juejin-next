{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/wangning/Desktop/ssr-juejin-next/pages/index.js\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\nimport React from 'react';\nimport Layout from '../components/CommonLayout';\nimport LeftColumn from '../components/LeftColumn';\nimport RightColumn from '../components/RightColumn';\nimport { connect } from 'react-redux';\nimport { refreshGoldList, updateGoldConds } from '../action/githubAction';\nimport { refreshGithubList, updateGithubConds } from '../action/goldAction';\n\nvar Index = function Index(props) {\n  return __jsx(Layout, {\n    leftCol: __jsx(LeftColumn, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    })),\n    rightCol: __jsx(RightColumn, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  });\n};\n\nIndex.getInitialProps = function _callee() {\n  var res1, article, res2, github;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/getRecommendedArticals', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: _JSON$stringify({\n              \"category\": \"ai\",\n              \"order\": \"heat\",\n              \"offset\": 0,\n              \"limit\": 30\n            })\n          }));\n\n        case 2:\n          res1 = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res1.json());\n\n        case 5:\n          article = _context.sent;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/getHighscoreGithub', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: _JSON$stringify({\n              \"category\": \"trending\",\n              \"period\": \"day\",\n              \"lang\": \"css\",\n              \"offset\": 0,\n              \"limit\": 30\n            })\n          }));\n\n        case 8:\n          res2 = _context.sent;\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(res2.json());\n\n        case 11:\n          github = _context.sent;\n          return _context.abrupt(\"return\", {\n            articles: article.data,\n            githubs: github.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    gold: state.gold,\n    github: state.github,\n    csr: false\n  };\n};\n\nvar mapDispatchToProps = {\n  refreshGoldList: refreshGoldList,\n  updateGoldConds: updateGoldConds,\n  refreshGithubList: refreshGithubList,\n  updateGithubConds: updateGithubConds\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":{"version":3,"sources":["/Users/wangning/Desktop/ssr-juejin-next/pages/index.js"],"names":["Link","fetch","React","Layout","LeftColumn","RightColumn","connect","refreshGoldList","updateGoldConds","refreshGithubList","updateGithubConds","Index","props","getInitialProps","method","headers","body","res1","json","article","res2","github","articles","data","githubs","mapStateToProps","state","gold","csr","mapDispatchToProps"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,wBAAjD;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,sBAArD;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK,EAAI;AACnB,SACI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAG,MAAC,UAAD,eAAgBA,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAlB;AAA8C,IAAA,QAAQ,EAAG,MAAC,WAAD,eAAiBA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAIH,CALD;;AAOAD,KAAK,CAACE,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACDZ,KAAK,CAAC,kDAAD,EAAqD;AACzEa,YAAAA,MAAM,EAAE,MADiE;AAEzEC,YAAAA,OAAO,EAAE;AACT,8BAAgB;AADP,aAFgE;AAKzEC,YAAAA,IAAI,EAAE,gBAAe;AAAC,0BAAW,IAAZ;AAAiB,uBAAQ,MAAzB;AAAgC,wBAAS,CAAzC;AAA2C,uBAAQ;AAAnD,aAAf;AALmE,WAArD,CADJ;;AAAA;AACdC,UAAAA,IADc;AAAA;AAAA,2CAQEA,IAAI,CAACC,IAAL,EARF;;AAAA;AAQdC,UAAAA,OARc;AAAA;AAAA,2CASDlB,KAAK,CAAC,8CAAD,EAAiD;AACrEa,YAAAA,MAAM,EAAE,MAD6D;AAErEC,YAAAA,OAAO,EAAE;AACT,8BAAgB;AADP,aAF4D;AAKrEC,YAAAA,IAAI,EAAE,gBAAe;AAAC,0BAAW,UAAZ;AAAuB,wBAAS,KAAhC;AAAsC,sBAAO,KAA7C;AAAmD,wBAAS,CAA5D;AAA8D,uBAAQ;AAAtE,aAAf;AAL+D,WAAjD,CATJ;;AAAA;AASdI,UAAAA,IATc;AAAA;AAAA,2CAgBCA,IAAI,CAACF,IAAL,EAhBD;;AAAA;AAgBdG,UAAAA,MAhBc;AAAA,2CAiBb;AAAEC,YAAAA,QAAQ,EAAEH,OAAO,CAACI,IAApB;AAA0BC,YAAAA,OAAO,EAAEH,MAAM,CAACE;AAA1C,WAjBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAoBA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAC9BC,IAAAA,IAAI,EAAED,KAAK,CAACC,IADkB;AAE9BN,IAAAA,MAAM,EAAEK,KAAK,CAACL,MAFgB;AAG9BO,IAAAA,GAAG,EAAE;AAHyB,GAAL;AAAA,CAA7B;;AAMA,IAAMC,kBAAkB,GAAG;AACvBtB,EAAAA,eAAe,EAAfA,eADuB;AAEvBC,EAAAA,eAAe,EAAfA,eAFuB;AAGvBC,EAAAA,iBAAiB,EAAjBA,iBAHuB;AAIvBC,EAAAA,iBAAiB,EAAjBA;AAJuB,CAA3B;AAMA,eAAeJ,OAAO,CAACmB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6ClB,KAA7C,CAAf","sourcesContent":["import Link from 'next/link'\nimport fetch from 'isomorphic-unfetch'\nimport React from 'react'\nimport Layout from '../components/CommonLayout';\nimport LeftColumn from '../components/LeftColumn';\nimport RightColumn from '../components/RightColumn';\nimport { connect } from 'react-redux'\nimport { refreshGoldList, updateGoldConds } from '../action/githubAction'\nimport { refreshGithubList, updateGithubConds } from '../action/goldAction'\nconst Index = props => {\n    return (\n        <Layout leftCol={(<LeftColumn {...props} />)} rightCol={(<RightColumn {...props} />)}>\n        </Layout>\n    )\n}\n\nIndex.getInitialProps = async () => {\n    const res1 = await fetch('http://localhost:3000/api/getRecommendedArticals', {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\"category\":\"ai\",\"order\":\"heat\",\"offset\":0,\"limit\":30})\n    })\n    const article = await res1.json()\n    const res2 = await fetch('http://localhost:3000/api/getHighscoreGithub', {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\"category\":\"trending\",\"period\":\"day\",\"lang\":\"css\",\"offset\":0,\"limit\":30})\n    })\n    const github = await res2.json()\n    return { articles: article.data, githubs: github.data }\n}\n\nconst mapStateToProps = state => ({\n    gold: state.gold,\n    github: state.github,\n    csr: false\n});\n\nconst mapDispatchToProps = {\n    refreshGoldList,\n    updateGoldConds,\n    refreshGithubList,\n    updateGithubConds\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);"]},"metadata":{},"sourceType":"module"}