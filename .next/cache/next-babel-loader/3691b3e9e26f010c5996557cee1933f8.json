{"ast":null,"code":"const Request = require('../../request');\n\nconst Logger = require('../../Logger');\n\nconst cors = require('micro-cors')();\n\nexport const config = Request.getApiConfig();\nexport default cors(async (req, res) => {\n  // const {\n  //   query: { pid },\n  // } = req\n  const getHighscoreGithubAPI = Request(\"JUEJIN\", \"getHighscoreGithub\", null);\n  const result = await getHighscoreGithubAPI({\n    method: \"post\",\n    requestData: req.body\n  });\n  Logger.info(\"getHighscoreGithub Respnse => \", Request.formatResponse(result.data));\n  res.json(result.data);\n});","map":{"version":3,"sources":["/Users/wangning/Desktop/ssr-juejin-next/pages/api/getHighscoreGithub.js"],"names":["Request","require","Logger","cors","config","getApiConfig","req","res","getHighscoreGithubAPI","result","method","requestData","body","info","formatResponse","data","json"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,YAAD,CAAP,EAAb;;AACA,OAAO,MAAMG,MAAM,GAAGJ,OAAO,CAACK,YAAR,EAAf;AAEP,eAAeF,IAAI,CAAC,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AACpC;AACA;AACA;AAEA,QAAMC,qBAAqB,GAAGR,OAAO,CAAC,QAAD,EAAW,oBAAX,EAAiC,IAAjC,CAArC;AACA,QAAMS,MAAM,GAAG,MAAMD,qBAAqB,CAAC;AACvCE,IAAAA,MAAM,EAAE,MAD+B;AAEvCC,IAAAA,WAAW,EAAEL,GAAG,CAACM;AAFsB,GAAD,CAA1C;AAIAV,EAAAA,MAAM,CAACW,IAAP,CAAY,gCAAZ,EAA8Cb,OAAO,CAACc,cAAR,CAAuBL,MAAM,CAACM,IAA9B,CAA9C;AACAR,EAAAA,GAAG,CAACS,IAAJ,CAASP,MAAM,CAACM,IAAhB;AACH,CAZkB,CAAnB","sourcesContent":["const Request = require('../../request');\nconst Logger = require('../../Logger');\nconst cors = require('micro-cors')()\nexport const config = Request.getApiConfig();\n\nexport default cors(async (req, res) => {\n    // const {\n    //   query: { pid },\n    // } = req\n\n    const getHighscoreGithubAPI = Request(\"JUEJIN\", \"getHighscoreGithub\", null);\n    const result = await getHighscoreGithubAPI({\n        method: \"post\",\n        requestData: req.body\n    });\n    Logger.info(\"getHighscoreGithub Respnse => \", Request.formatResponse(result.data))\n    res.json(result.data);\n})"]},"metadata":{},"sourceType":"module"}